<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrencies on by bit</title>
    <link>https://pabloos.github.io/concurrency/</link>
    <description>Recent content in Concurrencies on by bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Apr 2020 13:20:57 +0200</lastBuildDate>
    
	<atom:link href="https://pabloos.github.io/concurrency/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pipelines</title>
      <link>https://pabloos.github.io/concurrency/pipelines/</link>
      <pubDate>Thu, 09 Apr 2020 13:20:57 +0200</pubDate>
      
      <guid>https://pabloos.github.io/concurrency/pipelines/</guid>
      <description>All the code used here is on my github: pabloos. Keep an eye on it, for clarity I will not reference all the functions. Each section has his own branch.
1. Original Sketch A pipeline is not unlike an assembly line: a queue of jobs that transform an input and sends it to the next stage. In Go an obvious implementation would be based on channels (originally based on an idea in the oficial blog), in which each function represents a separate stage connected with the next one using a channel.</description>
    </item>
    
  </channel>
</rss>