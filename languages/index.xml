<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Languages on DevOoops</title>
    <link>https://pabloos.github.io/languages/</link>
    <description>Recent content in Languages on DevOoops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Sep 2020 18:38:07 +0200</lastBuildDate>
    
	<atom:link href="https://pabloos.github.io/languages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1:1 classes</title>
      <link>https://pabloos.github.io/languages/1to1/</link>
      <pubDate>Sun, 20 Sep 2020 18:38:07 +0200</pubDate>
      
      <guid>https://pabloos.github.io/languages/1to1/</guid>
      <description>The basic idea: a way to get rid of classes There are many well identified classes that only have a one public method, such as iterators, lexers and that kind of walk-on-collections objects:
class Greet { constructor(greet) { this.greet = greet } greet(name) { console.log(this.greet + &amp;#34; &amp;#34; + name) } } const salut = new Greet(&amp;#34;Hello&amp;#34;) salut.greet(&amp;#34;Pablo&amp;#34;) // Hello Pablo For some cases I use the following instead. That&amp;rsquo;s it, just a functor:</description>
    </item>
    
    <item>
      <title>Use Go interfaces</title>
      <link>https://pabloos.github.io/languages/usegointerfaces/</link>
      <pubDate>Sun, 28 Jun 2020 12:43:10 +0200</pubDate>
      
      <guid>https://pabloos.github.io/languages/usegointerfaces/</guid>
      <description>tl;dr:
   from\to io.Writer io.Reader string []byte bytes.Buffer     io.Writer &amp;ndash; io.Pipe io.WriteString N/A N/A   io.Reader io.Copy &amp;ndash; strings.Builder N/A N/A   string bytes.NewBufferString strings.NewReader &amp;ndash; []byte(&amp;ldquo;io&amp;rdquo;)    []byte bytes.NewBuffer bytes.New{Reader/Buffer} string(byteSlice) &amp;ndash; bytes.NewBuffer   bytes.Buffer it&amp;rsquo;s it&amp;rsquo;s buf.String buf.bytes &amp;ndash;    Go has become a very popular language, so there&amp;rsquo;s day to day multiple posts and tutorials.</description>
    </item>
    
  </channel>
</rss>